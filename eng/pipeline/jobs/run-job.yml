# Copyright (c) Microsoft Corporation.
# Use of this source code is governed by a BSD-style
# license that can be found in the LICENSE file.

# This job runs a builder for any OS.

parameters:
  # { id, os, arch, config, distro? }
  builder: {}
  createSourceArchive: false

jobs:
  - job: ${{ parameters.builder.id }}
    workspace:
      clean: all

    ${{ if eq(parameters.builder.os, 'windows') }}:
      pool:
        vmImage: windows-2019

    ${{ if eq(parameters.builder.os, 'linux') }}:
      ${{ if eq(parameters.builder.arch, 'amd64') }}:
        pool:
          # The VM image of the Docker host. This doesn't need to match the container image, but it may
          # give slightly better coverage by matching the kernel version.
          vmImage: ubuntu-18.04
        # The image used for the container this job runs in. The tests run in this container, so it
        # should match what we support as closely as possible.
        ${{ if not(parameters.builder.distro) }}:
          container: golangpublicimages.azurecr.io/go-infra-images/prereqs:cbl-mariner-1.0.20211027-20211201-0cccc22
        ${{ if eq(parameters.builder.distro, 'ubuntu') }}:
          container: mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-20211022152710-047508b
      ${{ if eq(parameters.builder.arch, 'arm64') }}:
        pool:
          name: Docker-Linux-Arm-Internal
        ${{ if not(parameters.builder.distro) }}:
          container: golangpublicimages.azurecr.io/go-infra-images/prereqs:cbl-mariner-arm64-1.0-20220314-a003148

    steps:
      - ${{ if eq(parameters.builder.os, 'linux') }}:
        # AzDO builds don't seem to set user ID in the running container, so files from a previous
        # build might be owned by root and unable to be cleaned up by AzDO's cleanup step. Clean up
        # the build dirs ourselves in another Docker container to avoid failures.
        - script: |
            set -x
            echo 'Cleaning old build dirs with sudo in case of root ownership.'
            sudo rm -v -rf a b s
            mkdir s
          workingDirectory: $(Agent.BuildDirectory)
          displayName: Cleanup

        - template: ../steps/checkout-unix-task.yml
        - template: ../steps/init-pwsh-task.yml

      - ${{ if eq(parameters.builder.os, 'windows') }}:
        - template: ../steps/checkout-windows-task.yml
        - pwsh: |
            Write-Host "Increasing max build retries to mitigate 'Access denied' flakiness during EXE copying on Windows."
            Write-Host "##vso[task.setvariable variable=GO_MAKE_MAX_RETRY_ATTEMPTS]5"
          displayName: Increase 'make' retry attempts

      # Initialize stage 0 toolset ahead of time so we can track timing data separately from the
      # build operations. When we call this script again later, it won't download Go again.
      - pwsh: |
          . eng/utilities.ps1
          Get-Stage0GoRoot
        displayName: Init stage 0 Go toolset

      - template: ../steps/init-submodule-task.yml

      # Create the source archive on one job only. The os choice is arbitrary.
      - ${{ if and(eq(parameters.createSourceArchive, true), eq(parameters.builder.config, 'buildandpack'), eq(parameters.builder.os, 'linux'), eq(parameters.builder.arch, 'amd64')) }}:
        - pwsh: |
            git config --global user.name "microsoft-golang-bot"
            git config --global user.email "microsoft-golang-bot@users.noreply.github.com"

            # Turn the patches into commits, so HEAD includes the changes.
            eng/run.ps1 submodule-refresh -commits
            eng/run.ps1 pack-source
          displayName: Archive submodule source

      - pwsh: |
          # Apply the patches as staged changes, so the HEAD commit is the same as upstream.
          eng/run.ps1 submodule-refresh
        displayName: Apply patches

      # Use build script directly for "buildandpack". If we used run-builder, we would need to
      # download its external module dependencies.
      - ${{ if eq(parameters.builder.config, 'buildandpack' ) }}:
        - pwsh: |
            eng/run.ps1 build -pack
          displayName: Build and Pack

        - publish: eng/artifacts/bin
          artifact: Binaries ${{ parameters.builder.id }}
          displayName: Pipeline publish
          condition: succeededOrFailed()

      # Use run-builder for any configuration that includes tests. run-builder uses the "gotestsum"
      # module to convert test results to a JUnit file that Azure DevOps can understand.
      - ${{ if ne(parameters.builder.config, 'buildandpack') }}:
        - pwsh: |
            if ($IsWindows) {
              Write-Host "Removing Git usr\bin from PATH to avoid running a Linux test that would fail, 'TestScript/script_wait'..."
              Write-Host $env:PATH
              $env:PATH = (
                $env:PATH -split ';' | Where-Object { $_ -ne 'C:\Program Files\Git\usr\bin' }
              ) -join ';'
            }

            eng/run.ps1 run-builder `
              -builder '${{ parameters.builder.os }}-${{ parameters.builder.arch }}-${{ parameters.builder.config }}' `
              -junitfile '$(Build.SourcesDirectory)/eng/artifacts/TestResults.xml'
          displayName: Run ${{ parameters.builder.config }}

        - task: PublishTestResults@2
          displayName: Publish test results
          condition: succeededOrFailed()
          inputs:
            testResultsFormat: JUnit
            testResultsFiles: $(Build.SourcesDirectory)/eng/artifacts/TestResults.xml
            testRunTitle: ${{ parameters.builder.id }}
            buildPlatform: ${{ parameters.builder.arch }}
            buildConfiguration: ${{ parameters.builder.config }}
            publishRunAttachments: true

      - ${{ if eq(parameters.builder.os, 'linux') }}:
        # Files may be owned by root because builds don't set user ID. If this build is running on a
        # persistent machine, later builds may fail to clean up this build's directory as as
        # result--even if it also uses a build container. This step prevents that kind of failure by
        # using chown to make sure the machine's agent user can access/delete the files.
        - script: |
            sudo chown -R $(id -u):$(id -g) *
          workingDirectory: $(Agent.BuildDirectory)
          displayName: Update file ownership from root to build agent account
          continueOnError: true
          condition: succeededOrFailed()
