# Copyright (c) Microsoft Corporation.
# Use of this source code is governed by a BSD-style
# license that can be found in the LICENSE file.

# This job downloads Go binaries from the specified builders' pipeline artifacts, signs them, and
# publishes the signed files and signatures into a consolidated pipeline artifact.

parameters:
  # [] of { id, os, arch, config, distro?, experiment? }
  builders: []

stages:
  - stage: Sign
    # Depend on all build stages that produced artifacts that need signing.
    dependsOn:
      - ${{ each builder in parameters.builders }}:
        - ${{ builder.id }}
    jobs:
      - ${{ if and(ne(variables['System.TeamProject'], 'public'), ne(variables['Build.Reason'], 'PullRequest')) }}:
        - job: Sign
          pool: ${{ parameters.pool }}
          workspace:
            clean: all

          templateContext:
            mb:
              signing:
                enabled: true
                signType: $(SigningType)
                zipSources: false
                feedSource: 'https://dnceng.pkgs.visualstudio.com/_packaging/MicroBuildToolset/nuget/v3/index.json'
            outputs:
              # https://eng.ms/docs/cloud-ai-platform/devdiv/one-engineering-system-1es/1es-docs/1es-pipeline-templates/features/outputs
              - output: pipelineArtifact
                path: $(Build.StagingDirectory)/ToSign
                artifact: Binaries Signed
              - output: pipelineArtifact
                path: 'eng\signing'
                artifact: Signing diagnosis directory

          steps:
            - template: ../steps/checkout-windows-task.yml

            - ${{ each builder in parameters.builders }}:
              - download: current
                artifact: Binaries ${{ builder.id }}
                # Filter out manifests added by 1ES pipeline template.
                patterns: '!_manifest/**'
                displayName: 'Download: Binaries ${{ builder.id }}'

              - powershell: |
                  $flatDir = "$(Build.StagingDirectory)/ToSign"
                  New-Item $flatDir -ItemType Directory -ErrorAction Ignore

                  Get-ChildItem -Recurse -File -Path @(
                    'Binaries ${{ builder.id }}'
                  ) | %{
                    if (Test-Path "$flatDir\$($_.Name)") {
                      throw "Duplicate filename, unable to flatten: $($_.FullName)"
                    }
                    Copy-Item $_.FullName $flatDir
                  }
                displayName: 'Copy to flat dir: ${{ builder.id }}'
                workingDirectory: '$(Pipeline.Workspace)'

            - task: DotNetCoreCLI@2
              displayName: 'Sign Files'
              inputs:
                command: custom
                projects: '$(Build.SourcesDirectory)/eng/signing/Sign.csproj'
                custom: build
                arguments: >-
                  /t:AfterBuild
                  /p:SignFilesDir=$(Build.StagingDirectory)/ToSign
                  /p:SignType=$(SignType)
                  /bl:eng/signing/SignFiles.binlog
                  /v:n
